import{j as b,a as H}from"./emotion-react-jsx-runtime.browser.esm-B6nDGTOp.js";import{a as z}from"./assignDisplayName-lT0r0-ot.js";import{u as v}from"./useHandler-HI23tEoY.js";import{r as B}from"./random-CmfFXdz5.js";import{c as d}from"./emotion-react.browser.esm-DKbCFQzN.js";import{t as n}from"./index-BA0eH0Wu.js";import{c as k}from"./index-DbGQkxQ5.js";import{r as a}from"./index-qCb0-TeD.js";import{u as A}from"./DisabledContext-t2QVHVjL.js";import{M as G}from"./index-_xFncG76.js";import{d as J,c as K}from"./index-gEP6Tn1u.js";import{m as Q}from"./merge-BUZDYRsv.js";const S="button",U=B(),g=`chip-${U}-`,s={root:`${g}root`,startIconSpan:`${g}start-icon-span`,childrenSpan:`${g}children-span`},u=J({chip:d([K,{display:"inline-flex",alignItems:"center",marginRight:0,paddingInline:12,paddingBlock:4,gap:4,borderRadius:26,fontSize:12,color:n.colors.neutral009,backgroundColor:n.colors.white,borderWidth:1,borderStyle:"solid",borderColor:n.colors.neutral003,cursor:"pointer",textDecoration:"none",transition:["background-color","border-color","color"].map(m=>`${m} 0.3s ease-in-out`).join(", "),[`&:has(.${s.startIconSpan})`]:{paddingLeft:8},"&:hover, &:active, &:focus":{backgroundColor:n.colors.neutral001},"&:focus-visible":{outlineOffset:2,outlineColor:n.colors.primaryOutline},"&:disabled":{borderColor:n.colors.neutral003,backgroundColor:n.colors.neutral001,color:n.colors.neutral005,cursor:"not-allowed"},[`&:not(:disabled) .${s.startIconSpan}`]:{color:n.colors.blue006}}],";label:emotion-chip;"),checked:d({"&:not(:disabled)":{borderColor:n.colors.blue006,backgroundColor:n.colors.blue002,"&:hover":{borderColor:n.colors.blue005},"&:active":{borderColor:n.colors.blue007},"&:focus":{borderColor:n.colors.blue003}}},";label:emotion-checked;"),startIconSpan:{name:"ej2ov5-emotion-startIconSpan",styles:"&, &.anticon{font-size:inherit;};label:emotion-startIconSpan;"}}),T=a.forwardRef(function({component:x=S,...e},q){const[y,I]=a.useState(e.checked??!1),p=A()(e.disabled),c=a.useMemo(()=>"checked"in e?e.checked:y,[y,e]),N=a.useMemo(()=>({checkedIcon:b(G,{"un-i-motif":"check"})}),[]),r=a.useMemo(()=>Q({},N,e),[N,e]),{startIcon:f,checkedIcon:_,startIconSpanProps:t,childrenSpanProps:o,...E}=r,V=v(function(...h){var i;const[l]=h;if(p)return;const C=!c;I(C),(i=e.onChange)==null||i.call(e,l,C)}),D=v(function(...h){var i,M;const[l]=h;if(p){l.preventDefault();return}if((i=e.onClick)==null||i.call(e,...h),l.defaultPrevented)return;I(!c),(M=e.onChange)==null||M.call(e,l,!c)}),w=a.useMemo(()=>c&&"checkedIcon"in r?_:f,[c,r,_,f]),j=a.useMemo(()=>d([u.chip,c?u.checked:null],";label:emotion-rootCss;"),[c]),R=a.useMemo(()=>k(s.root,r.className),[r.className]),$=a.useMemo(()=>d([u.startIconSpan,t==null?void 0:t.css],";label:emotion-startIconSpanCss;"),[t==null?void 0:t.css]),L=a.useMemo(()=>k(s.startIconSpan,t==null?void 0:t.className),[t==null?void 0:t.className]),F=a.useMemo(()=>d([u.startIconSpan,o==null?void 0:o.css],";label:emotion-childrenSpanCss;"),[o==null?void 0:o.css]),P=a.useMemo(()=>k(s.childrenSpan,o==null?void 0:o.className),[o==null?void 0:o.className]);return H(x,{css:j,ref:q,...E,className:R,onChange:V,onClick:D,disabled:p,children:[w&&b("span",{...o,css:$,className:L,children:w}),b("span",{...o,css:F,className:P,children:e.children})]})});z(T,"Chip");const O=Object.assign(T,{defaultComponent:S,classNameRecord:s});try{O.displayName="api",O.__docgenInfo={description:"",displayName:"api",props:{component:{defaultValue:null,description:`The component used for the root node.
Either a string to use a HTML element or a component.
The component used for the root node.`,name:"component",required:!1,type:{name:'(ElementType<any, keyof IntrinsicElements> & "symbol") | (ElementType<any, keyof IntrinsicElements> & "object") | ... 177 more ... | (ElementType<...> & FunctionComponent<...>)'}},children:{defaultValue:null,description:"The content of the chip.",name:"children",required:!1,type:{name:"ReactNode"}},checked:{defaultValue:null,description:`Checked state of the chip. If not provided, the component will manage its
own state.`,name:"checked",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback when the chip is toggled. It won't be called if\n`event.preventDefault` is called in the `onClick` callback.",name:"onChange",required:!1,type:{name:"(e: FormEvent<HTMLButtonElement>, checked: boolean) => void"}},startIcon:{defaultValue:null,description:"The start icon of the chip. Will be replaced by the `checkedIcon` if the\nchip is checked.",name:"startIcon",required:!1,type:{name:"ReactNode"}},checkedIcon:{defaultValue:null,description:"The icon to display when the chip is checked.",name:"checkedIcon",required:!1,type:{name:"ReactNode"}},disabled:{defaultValue:null,description:"The disabled state of the chip.",name:"disabled",required:!1,type:{name:"boolean"}},startIconSpanProps:{defaultValue:null,description:"Props for the span that wraps the start icon.",name:"startIconSpanProps",required:!1,type:{name:'Omit<ComponentPropsWithCssProp<"span">, "children">'}},childrenSpanProps:{defaultValue:null,description:"Props for the span that wraps the children.",name:"childrenSpanProps",required:!1,type:{name:'Omit<ComponentPropsWithCssProp<"span">, "children">'}}}}}catch{}try{ChipOwnProps.displayName="ChipOwnProps",ChipOwnProps.__docgenInfo={description:"List the own props of the component.",displayName:"ChipOwnProps",props:{}}}catch{}export{O as a};
