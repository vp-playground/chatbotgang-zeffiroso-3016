import{j as h}from"./emotion-react-jsx-runtime.browser.esm-B6nDGTOp.js";import{r as f}from"./index-qCb0-TeD.js";import{u as s,B as k}from"./env-B2Oq9Sof.js";import{T as m,u as C}from"./navigate-CRWb9NLN.js";import{s as y}from"./shouldProcessLinkClick-Cauo1FQC.js";import{n as v}from"./noop-DX6rZLP_.js";function _(a,e){return s(k,a)}function g(){try{return C()}catch{return v}}const c=f.forwardRef(function(e,u){const l=g(),d=f.useMemo(function(){const t={href:e.href};if(e.href&&(e.target||(t.target="_blank"),e.rel||(t.rel="noopener noreferrer")),e.to){if(!t.href){const o=_(e.to);t.href=o}t.onClick=function(...n){var r;const i=n[0];if((r=e.onClick)==null||r.call(e,...n),!i.defaultPrevented&&e.to){if(!y(i,e.target))return;i.preventDefault(),l(e.to)}},t.href===void 0&&(t.onClickCapture=function(...n){var r;n[0].preventDefault(),(r=e.onClickCapture)==null||r.call(e,...n)},t.href="#")}return t.href===void 0&&(t.onClickCapture=function(...n){var r;n[0].preventDefault(),(r=e.onClickCapture)==null||r.call(e,...n)},t.href="#"),t},[l,e]);return h(m.Link,{...e,ref:u,...d})});try{c.displayName="Link",c.__docgenInfo={description:'A wrapper of antd `Typography.Link` that supports both internal and external\nlink.\n\nFor internal link, use `to` prop to specify the route. It will be converted\nto href and handle `onClick` by `react-router-dom` `navigate`.\n\nFor external link, use `href` prop to specify the url. It will be passed to\nhref and add `target="_blank"` and `rel="noopener noreferrer"` automatically\nif not specified for security reason.\n\nFor link with only onClick without href, it will add `href="#"` if not\nspecified and prevent default `onClickCapture`.',displayName:"Link",props:{to:{defaultValue:null,description:"",name:"to",required:!1,type:{name:"ValidPathString"}},css:{defaultValue:null,description:"",name:"css",required:!1,type:{name:"SerializedStyles"}}}}}catch{}export{c as L};
