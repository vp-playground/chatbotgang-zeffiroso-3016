import{j as b}from"./emotion-react-jsx-runtime.browser.esm-B6nDGTOp.js";import{a as S}from"./assignDisplayName-lT0r0-ot.js";import{r as h}from"./index-qCb0-TeD.js";import{E as T}from"./appConstant-DrkG7OWi.js";function c({units:t,numbers:s,largestUnitMaxValue:u=Number.POSITIVE_INFINITY,maxLargestUnitCount:l=t.length,minLargestUnitCount:r=1,allowLargerZeroUnits:o=!1}){if(t.length===0)return null;const p=t[0],g=t.map(n=>({unit:n,value:s[n]??0}));return(()=>{const n=g.map(({unit:e,value:a})=>({unit:e,currentValue:a,overflow:!1}));function m(){return n[0]}for(;n.length>1;){const e=m();if(!e||e.currentValue>0)break;n.shift()}{const e=m();if(e&&e.unit===p&&e.currentValue>u)return[{unit:e.unit,currentValue:e.currentValue,overflow:!0}]}n.splice(l);function f(){return n[n.length-1]}function d(){var e;return(e=f())==null?void 0:e.unit}function i(){const e=d();if(!e)return;const a=t.indexOf(e);return t[a+1]}for(;!(n.length<=1||n.length<=r);){const e=f();if(!e||e.currentValue>0)break;n.pop()}for(;!(n.length>=r||!d());){const a=i();if(!a)break;n.push({unit:a,currentValue:0,overflow:!1})}if(o)for(;!(n.length>=r);){const e=m(),a=f(),U=e?t[t.indexOf(e.unit)-1]:a?t[t.indexOf(a.unit)-1]:void 0;if(!U)break;n.unshift({unit:U,currentValue:0,overflow:!1})}return n})()}const V=t=>`${t.overflow?`${t.largestUnitMaxValue}+`:`${t.currentValue}`}${t.unit}`;function I(t){const s=t.largestUnitMaxValue??Number.POSITIVE_INFINITY,u=t.render??V,l=(()=>{const r=c(t);return r&&r.map(o=>({...o,largestUnitMaxValue:s}))})();return l?l.map(u).join(""):""}const _="div",w=h.forwardRef(function({units:s,numbers:u,largestUnitMaxValue:l=Number.POSITIVE_INFINITY,maxLargestUnitCount:r=s.length,minLargestUnitCount:o=1,allowLargerZeroUnits:p=!1,component:g=_,render:y=V,fallback:n=T,...m},f){const d=h.useMemo(()=>{const i=c({units:s,numbers:u,largestUnitMaxValue:l,maxLargestUnitCount:r,minLargestUnitCount:o,allowLargerZeroUnits:p});return i&&i.map(e=>({...e,largestUnitMaxValue:l}))},[p,l,r,o,u,s]);return d?b(g,{...m,ref:f,children:d.map((...i)=>b(h.Fragment,{children:y(...i)},i[0].unit))}):n});S(w,"PruneSmallerUnits");try{c.displayName="pruneSmallerUnits",c.__docgenInfo={description:`Prunes smaller units based on the provided options.

Returns null if the units array is empty.

Returns an array of items with the number and unit to display.

In most cases, you don't use this function directly. Use
\`pruneSmallerUnitsToString\` for string output or \`PruneSmallerUnits\` for
React component output.`,displayName:"pruneSmallerUnits",props:{units:{defaultValue:null,description:"The array of units to display. From the largest to the smallest.",name:"units",required:!0,type:{name:"TUnit[]"}},numbers:{defaultValue:null,description:`The array of numbers with units to display. From the largest to the
smallest.`,name:"numbers",required:!0,type:{name:"Partial<Record<TUnit, number>>"}},largestUnitMaxValue:{defaultValue:{value:"Number.POSITIVE_INFINITY"},description:"If over the max unit, display n+.",name:"largestUnitMaxValue",required:!1,type:{name:"number"}},maxLargestUnitCount:{defaultValue:{value:"units.length"},description:"The maximum number of top units to display.",name:"maxLargestUnitCount",required:!1,type:{name:"number"}},minLargestUnitCount:{defaultValue:{value:"1"},description:"The minimum number of top units to display.\n\n`false` to disable filling smaller units.",name:"minLargestUnitCount",required:!1,type:{name:"number"}},allowLargerZeroUnits:{defaultValue:{value:"false"},description:"If true, allows the display of larger zero units to fill the zero for\nlarger units when `minLargestUnitCount` is set.",name:"allowLargerZeroUnits",required:!1,type:{name:"boolean"}}}}}catch{}try{I.displayName="pruneSmallerUnitsToString",I.__docgenInfo={description:`Transform an array of numbers with units to display to a string.

example:

\`\`\`ts
pruneSmallerUnitsToString({
  units: ["d", "h", "m", "s"],
  numbers: { d: 1, h: 2, m: 3, s: 4 },
  largestUnitMaxValue: 2,
  render: (args) =>
    args.overflow
      ? \`\${args.largestUnitMaxValue}+\`
      : \`\${args.currentValue}\${args.unit}\`,
}); // "1d2h"
\`\`\``,displayName:"pruneSmallerUnitsToString",props:{units:{defaultValue:null,description:"The array of units to display. From the largest to the smallest.",name:"units",required:!0,type:{name:"TUnit[]"}},numbers:{defaultValue:null,description:`The array of numbers with units to display. From the largest to the
smallest.`,name:"numbers",required:!0,type:{name:"Partial<Record<TUnit, number>>"}},largestUnitMaxValue:{defaultValue:null,description:"If over the max unit, display n+.",name:"largestUnitMaxValue",required:!1,type:{name:"number"}},maxLargestUnitCount:{defaultValue:null,description:"The maximum number of top units to display.",name:"maxLargestUnitCount",required:!1,type:{name:"number"}},minLargestUnitCount:{defaultValue:null,description:"The minimum number of top units to display.\n\n`false` to disable filling smaller units.",name:"minLargestUnitCount",required:!1,type:{name:"number"}},allowLargerZeroUnits:{defaultValue:null,description:"If true, allows the display of larger zero units to fill the zero for\nlarger units when `minLargestUnitCount` is set.",name:"allowLargerZeroUnits",required:!1,type:{name:"boolean"}},render:{defaultValue:null,description:"The function to render the number with unit.\ndefault:\n  - `${currentValue}${unit}`\n  - `${largestUnitMaxValue}+${unit}` if overflow.",name:"render",required:!1,type:{name:"(args: RenderArgs<TUnit>, index: number, all: RenderArgs<TUnit>[]) => string"}}}}}catch{}try{PruneSmallerUnitsOwnProps.displayName="PruneSmallerUnitsOwnProps",PruneSmallerUnitsOwnProps.__docgenInfo={description:"List the own props of the component.",displayName:"PruneSmallerUnitsOwnProps",props:{}}}catch{}export{w as P,I as p};
