import{j as C}from"./emotion-react-jsx-runtime.browser.esm-B6nDGTOp.js";import{u as f}from"./useHandler-HI23tEoY.js";import{b as E,d as y}from"./browser-CGO7xzdY.js";import{r as a}from"./index-qCb0-TeD.js";import{o as _}from"./index-Bf2qc8Rt.js";import{r as q}from"./random-CmfFXdz5.js";import{u as j}from"./useQuery-xBc68arQ.js";import{e as T}from"./pathe.ff20891b-CZu1kPQR.js";import{d as v}from"./downloadFile-BK6zBYsu.js";const D=(e,o,r)=>new File([e],o,{type:e.type,lastModified:Date.now()}),g=`qrcode-${q()}`;function F({text:e,options:o}){return[{[g]:g,qrcodeToDataUrlParams:{text:e,options:o}}]}function I({text:e,options:o,queryOptions:r}){return j(F({text:e,options:o}),async({queryKey:[{qrcodeToDataUrlParams:s}]})=>E.toDataURL(s.text,s.options),r)}const S={"image/png":".png","image/jpeg":[".jpg",".jpeg"],"image/webp":".webp"};function Q(e,o){const r=S[o],n=T(e);return Array.isArray(r)?r.includes(n)?e:e+r[0]:n===r?e:e+r}const w=a.forwardRef(function({text:o,options:r,queryOptions:n,imperativeHandleRef:s,...b},c){const t=I({text:o,options:r,queryOptions:{...n,suspense:!0,useErrorBoundary:!0}}),d=(r==null?void 0:r.type)??"image/png",h=a.useRef(null),p=f(async function(i){if(!t.isSuccess)return;const u=await y(t.data);await v({obj:u,fileName:Q(i,d)})}),m=f(async function(i){if(!t.isSuccess)throw new Error("The QR code image is not available.");const u=await y(t.data);return D(u,Q(i,d))}),l=a.useMemo(()=>({download:p,getImageFile:m}),[p,m]);a.useImperativeHandle(s,()=>l,[l]);const x=a.useMemo(()=>_([h,c]),[c]);return t.isSuccess?C("img",{...b,ref:x,src:t.data}):null});try{w.displayName="QrCode",w.__docgenInfo={description:`The QRCode component is used to generate a QR code from a string.

This component uses the \`useQrCodeDataUrlQuery\` hook to generate the QR code
and suspends until the data is available, wrapping the component in a
Suspense component with a loading fallback if necessary. Instead, you can
use \`QrCodeBlock\` to handle the suspense for you.`,displayName:"QrCode",props:{}}}catch{}export{w as Q};
